        -:    0:Source:string_match-seq.c
        -:    0:Graph:string_match-seq.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/* Copyright (c) 2007-2009, Stanford University
        -:    2:* All rights reserved.
        -:    3:*
        -:    4:* Redistribution and use in source and binary forms, with or without
        -:    5:* modification, are permitted provided that the following conditions are met:
        -:    6:*     * Redistributions of source code must retain the above copyright
        -:    7:*       notice, this list of conditions and the following disclaimer.
        -:    8:*     * Redistributions in binary form must reproduce the above copyright
        -:    9:*       notice, this list of conditions and the following disclaimer in the
        -:   10:*       documentation and/or other materials provided with the distribution.
        -:   11:*     * Neither the name of Stanford University nor the names of its 
        -:   12:*       contributors may be used to endorse or promote products derived from 
        -:   13:*       this software without specific prior written permission.
        -:   14:*
        -:   15:* THIS SOFTWARE IS PROVIDED BY STANFORD UNIVERSITY ``AS IS'' AND ANY
        -:   16:* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   17:* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   18:* DISCLAIMED. IN NO EVENT SHALL STANFORD UNIVERSITY BE LIABLE FOR ANY
        -:   19:* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   20:* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   21:* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
        -:   22:* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   23:* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   24:* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   25:*/ 
        -:   26:
        -:   27:#include <stdio.h>
        -:   28:#include <strings.h>
        -:   29:#include <string.h>
        -:   30:#include <stddef.h>
        -:   31:#include <stdlib.h>
        -:   32:#include <unistd.h>
        -:   33:#include <assert.h>
        -:   34:#include <sys/mman.h>
        -:   35:#include <sys/stat.h>
        -:   36:#include <sys/time.h>
        -:   37:#include <fcntl.h>
        -:   38:#include <ctype.h>
        -:   39:#include <time.h>
        -:   40:#include <inttypes.h>
        -:   41:
        -:   42:#include "stddefines.h"
        -:   43:
        -:   44:#define SALT_SIZE 2
        -:   45:#define MAX_REC_LEN 1024
        -:   46:#define OFFSET 5
        -:   47:
        -:   48:typedef struct {
        -:   49:  int keys_file_len;
        -:   50:  int encrypted_file_len;
        -:   51:  long bytes_comp;
        -:   52:  char * keys_file;
        -:   53:  char * encrypt_file;
        -:   54:  char* salt;
        -:   55:} str_data_t;
        -:   56:
        -:   57:void compute_hashes(char* word, char* final_word);
        -:   58:
        -:   59:/** getnextline()
        -:   60: *  Function to get the next word
        -:   61: */
function getnextline called 0 returned 0% blocks executed 0%
    #####:   62:int getnextline(char* output, int max_len, char* file)
        -:   63:{
    #####:   64:	int i=0;
    #####:   65:	while(i<max_len-1)
branch  0 never executed
branch  1 never executed
        -:   66:	{
    #####:   67:		if( file[i] == '\0')
branch  0 never executed
branch  1 never executed
        -:   68:		{
    #####:   69:			if(i==0)
branch  0 never executed
branch  1 never executed
    #####:   70:				return -1;
        -:   71:			else
    #####:   72:				return i;
        -:   73:		}
    #####:   74:		if( file[i] == '\r')
branch  0 never executed
branch  1 never executed
    #####:   75:			return (i+2);
        -:   76:
    #####:   77:		if( file[i] == '\n' )
branch  0 never executed
branch  1 never executed
    #####:   78:			return (i+1);
        -:   79:
    #####:   80:		output[i] = file[i];
    #####:   81:		i++;
        -:   82:	}
    #####:   83:	file+=i;
    #####:   84:	return i;
        -:   85:}
        -:   86:
        -:   87:/** compute_hashes()
        -:   88: *  Simple Cipher to generate a hash of the word 
        -:   89: */
function compute_hashes called 0 returned 0% blocks executed 0%
    #####:   90:void compute_hashes(char* word, char* final_word)
        -:   91:{
        -:   92:	int i;
        -:   93:
    #####:   94:	for(i=0;i<strlen(word);i++) {
branch  0 never executed
branch  1 never executed
    #####:   95:		final_word[i] = word[i]+OFFSET;
        -:   96:	}
    #####:   97:	final_word[i] = '\0';
    #####:   98:}
        -:   99:
        -:  100:/** string_match()
        -:  101: *  function that goes through file looking for matches to the given hashes 
        -:  102: */
function string_match called 0 returned 0% blocks executed 0%
    #####:  103:void string_match(str_data_t *data_in)
        -:  104:{
    #####:  105:	assert(data_in);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  106:
    #####:  107:	 char *key1 = "Helloworld";
    #####:  108:	 char *key2 = "howareyou";
    #####:  109:	 char *key3 = "ferrari";
    #####:  110:	 char *key4 = "whotheman";
        -:  111:
    #####:  112:	 char *key1_final = malloc(strlen(key1) + 1);
    #####:  113:	 char *key2_final = malloc(strlen(key2) + 1);
    #####:  114:	 char *key3_final = malloc(strlen(key3) + 1);
    #####:  115:	 char *key4_final = malloc(strlen(key4) + 1);
        -:  116:
        -:  117: //printf("%d %d\n", strlen(key1), strlen(key2));
    #####:  118:	compute_hashes(key1, key1_final);
call    0 never executed
    #####:  119:	compute_hashes(key2, key2_final);
call    0 never executed
    #####:  120:	compute_hashes(key3, key3_final);
call    0 never executed
    #####:  121:	compute_hashes(key4, key4_final);
call    0 never executed
        -:  122:
        -:  123:	int key_len;
        -:  124:	char * key_file;
    #####:  125:	key_file = data_in->keys_file;
    #####:  126:	char * cur_word = malloc(MAX_REC_LEN);
    #####:  127:	char * cur_word_final = malloc(MAX_REC_LEN);
    #####:  128:	bzero(cur_word, MAX_REC_LEN);
    #####:  129:	bzero(cur_word_final, MAX_REC_LEN);
        -:  130:
    #####:  131:    while( (key_len = getnextline(cur_word, MAX_REC_LEN, key_file))>=0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  132:    {
    #####:  133:		compute_hashes(cur_word, cur_word_final);
call    0 never executed
        -:  134:
    #####:  135:	   if(!strcmp(key1_final, cur_word_final))
branch  0 never executed
branch  1 never executed
    #####:  136:		   dprintf("FOUND: WORD IS %s\n", cur_word);
call    0 never executed
        -:  137:
    #####:  138:	   if(!strcmp(key2_final, cur_word_final))
branch  0 never executed
branch  1 never executed
    #####:  139:		   dprintf("FOUND: WORD IS %s\n", cur_word);
call    0 never executed
        -:  140:
    #####:  141:	   if(!strcmp(key3_final, cur_word_final))
branch  0 never executed
branch  1 never executed
    #####:  142:		   dprintf("FOUND: WORD IS %s\n", cur_word);
call    0 never executed
        -:  143:
    #####:  144:	   if(!strcmp(key4_final, cur_word_final))
branch  0 never executed
branch  1 never executed
    #####:  145:		   dprintf("FOUND: WORD IS %s\n", cur_word);
call    0 never executed
        -:  146:		
    #####:  147:	   key_file = key_file + key_len;
    #####:  148:		bzero(cur_word, MAX_REC_LEN);
    #####:  149:		bzero(cur_word_final, MAX_REC_LEN);
        -:  150:   }
    #####:  151:   free(cur_word);
    #####:  152:   free(cur_word_final);
    #####:  153:   free(key1_final);
    #####:  154:   free(key2_final);
    #####:  155:   free(key3_final);
    #####:  156:   free(key4_final);
    #####:  157:}
        -:  158:
function main called 0 returned 0% blocks executed 0%
    #####:  159:int main(int argc, char *argv[]) 
        -:  160:{   
        -:  161:   int fd_keys;
        -:  162:   char *fdata_keys;
        -:  163:   struct stat finfo_keys;
        -:  164:   char *fname_keys;
        -:  165:
        -:  166:	 /* Option to provide the encrypted words in a file as opposed to source code */
        -:  167:   //fname_encrypt = "encrypt.txt";
        -:  168:   
    #####:  169:   if (argv[1] == NULL)
branch  0 never executed
branch  1 never executed
        -:  170:   {
    #####:  171:      printf("USAGE: %s <keys filename>\n", argv[0]);
call    0 never executed
    #####:  172:      exit(1);
call    0 never executed
        -:  173:   }
    #####:  174:   fname_keys = argv[1];
        -:  175:
        -:  176:   struct timeval starttime,endtime;
    #####:  177:   srand( (unsigned)time( NULL ) );
call    0 never executed
call    1 never executed
        -:  178:
    #####:  179:   printf("String Match: Running...\n");
call    0 never executed
        -:  180:
        -:  181:   /*// Read in the file
        -:  182:   CHECK_ERROR((fd_encrypt = open(fname_encrypt,O_RDONLY)) < 0);
        -:  183:   // Get the file info (for file length)
        -:  184:   CHECK_ERROR(fstat(fd_encrypt, &finfo_encrypt) < 0);
        -:  185:   // Memory map the file
        -:  186:   CHECK_ERROR((fdata_encrypt= mmap(0, finfo_encrypt.st_size + 1,
        -:  187:      PROT_READ | PROT_WRITE, MAP_PRIVATE, fd_encrypt, 0)) == NULL);*/
        -:  188:
        -:  189:   // Read in the file
    #####:  190:   CHECK_ERROR((fd_keys = open(fname_keys,O_RDONLY)) < 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  191:   // Get the file info (for file length)
    #####:  192:   CHECK_ERROR(fstat(fd_keys, &finfo_keys) < 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  193:   // Memory map the file
    #####:  194:   CHECK_ERROR((fdata_keys= mmap(0, finfo_keys.st_size + 1,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  195:      PROT_READ | PROT_WRITE, MAP_PRIVATE, fd_keys, 0)) == NULL);
        -:  196:
        -:  197:   // Setup splitter args
        -:  198:
        -:  199:	//dprintf("Encrypted Size is %ld\n",finfo_encrypt.st_size);
    #####:  200:	dprintf("Keys Size is %" PRId64 "\n",finfo_keys.st_size);
call    0 never executed
        -:  201:
        -:  202:   str_data_t str_data;
        -:  203:
    #####:  204:   str_data.keys_file_len = finfo_keys.st_size;
    #####:  205:   str_data.encrypted_file_len = 0;
    #####:  206:   str_data.bytes_comp = 0;
    #####:  207:   str_data.keys_file  = ((char *)fdata_keys);
    #####:  208:   str_data.encrypt_file  = NULL;
    #####:  209:   str_data.salt = malloc(SALT_SIZE);
        -:  210:   //str_data.encrypted_file_len = finfo_encrypt.st_size;
        -:  211:   //str_data.encrypt_file  = ((char *)fdata_encrypt);   
        -:  212:
        -:  213:   //printf("String Match: Calling Serial String Match\n");
    #####:  214:	 gettimeofday(&starttime,0);
call    0 never executed
    #####:  215:   string_match(&str_data);
call    0 never executed
    #####:  216:	 gettimeofday(&endtime,0);
call    0 never executed
    #####:  217:   printf("String Match: Completed %ld\n",(endtime.tv_sec - starttime.tv_sec));
call    0 never executed
        -:  218:
    #####:  219:   free(str_data.salt);
        -:  220:
        -:  221:   /*CHECK_ERROR(munmap(fdata_encrypt, finfo_encrypt.st_size + 1) < 0);
        -:  222:   CHECK_ERROR(close(fd_encrypt) < 0);*/
        -:  223:
    #####:  224:   CHECK_ERROR(munmap(fdata_keys, finfo_keys.st_size + 1) < 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  225:   CHECK_ERROR(close(fd_keys) < 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  226:   return 0;
        -:  227:}
