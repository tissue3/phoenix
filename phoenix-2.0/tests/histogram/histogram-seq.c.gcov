        -:    0:Source:histogram-seq.c
        -:    0:Graph:histogram-seq.gcno
        -:    0:Data:histogram-seq.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Copyright (c) 2007-2009, Stanford University
        -:    2:* All rights reserved.
        -:    3:*
        -:    4:* Redistribution and use in source and binary forms, with or without
        -:    5:* modification, are permitted provided that the following conditions are met:
        -:    6:*     * Redistributions of source code must retain the above copyright
        -:    7:*       notice, this list of conditions and the following disclaimer.
        -:    8:*     * Redistributions in binary form must reproduce the above copyright
        -:    9:*       notice, this list of conditions and the following disclaimer in the
        -:   10:*       documentation and/or other materials provided with the distribution.
        -:   11:*     * Neither the name of Stanford University nor the names of its 
        -:   12:*       contributors may be used to endorse or promote products derived from 
        -:   13:*       this software without specific prior written permission.
        -:   14:*
        -:   15:* THIS SOFTWARE IS PROVIDED BY STANFORD UNIVERSITY ``AS IS'' AND ANY
        -:   16:* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   17:* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   18:* DISCLAIMED. IN NO EVENT SHALL STANFORD UNIVERSITY BE LIABLE FOR ANY
        -:   19:* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   20:* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   21:* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
        -:   22:* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   23:* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   24:* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   25:*/ 
        -:   26:
        -:   27:#include <stdio.h>
        -:   28:#include <strings.h>
        -:   29:#include <string.h>
        -:   30:#include <stddef.h>
        -:   31:#include <stdlib.h>
        -:   32:#include <unistd.h>
        -:   33:#include <assert.h>
        -:   34:#include <sys/mman.h>
        -:   35:#include <sys/stat.h>
        -:   36:#include <fcntl.h>
        -:   37:#include <ctype.h>
        -:   38:
        -:   39:#include "stddefines.h"
        -:   40:
        -:   41:#define IMG_DATA_OFFSET_POS 10
        -:   42:#define BITS_PER_PIXEL_POS 28
        -:   43:
        -:   44:int swap;      // to indicate if we need to swap byte order of header information
        -:   45:
        -:   46:
        -:   47:/* test_endianess
        -:   48: *
        -:   49: */
function test_endianess called 1 returned 100% blocks executed 44%
        1:   50:void test_endianess() {
        1:   51:   unsigned int num = 0x12345678;
        1:   52:   char *low = (char *)(&(num));
        1:   53:   if (*low ==  0x78) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   54:      dprintf("No need to swap\n");
call    0 returned 1
        1:   55:      swap = 0;
        -:   56:   }
    #####:   57:   else if (*low == 0x12) {
branch  0 never executed
branch  1 never executed
    #####:   58:      dprintf("Need to swap\n");
call    0 never executed
    #####:   59:      swap = 1;
        -:   60:   }
        -:   61:   else {
    #####:   62:      printf("Error: Invalid value found in memory\n");
call    0 never executed
    #####:   63:      exit(1);
call    0 never executed
        -:   64:   } 
        1:   65:}
        -:   66:
        -:   67:/* swap_bytes
        -:   68: *
        -:   69: */
function swap_bytes called 0 returned 0% blocks executed 0%
    #####:   70:void swap_bytes(char *bytes, int num_bytes) {
        -:   71:   int i;
        -:   72:   char tmp;
        -:   73:   
    #####:   74:   for (i = 0; i < num_bytes/2; i++) {
branch  0 never executed
branch  1 never executed
    #####:   75:      dprintf("Swapping %d and %d\n", bytes[i], bytes[num_bytes - i - 1]);
call    0 never executed
    #####:   76:      tmp = bytes[i];
    #####:   77:      bytes[i] = bytes[num_bytes - i - 1];
    #####:   78:      bytes[num_bytes - i - 1] = tmp;   
        -:   79:   }
    #####:   80:}
        -:   81:
function main called 1 returned 100% blocks executed 59%
        1:   82:int main(int argc, char *argv[]) {
        -:   83:      
        -:   84:   int i;
        -:   85:   int fd;
        -:   86:   char *fdata;
        -:   87:   struct stat finfo;
        -:   88:   char * fname;
        -:   89:   int red[256];
        -:   90:   int green[256];
        -:   91:   int blue[256];
        -:   92:
        -:   93:
        -:   94:   // Make sure a filename is specified
        1:   95:   if (argv[1] == NULL) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   96:      printf("USAGE: %s <bitmap filename>\n", argv[0]);
call    0 never executed
    #####:   97:      exit(1);
call    0 never executed
        -:   98:   }
        -:   99:   
        1:  100:   fname = argv[1];
        -:  101:   
        -:  102:   // Read in the file
        1:  103:   CHECK_ERROR((fd = open(fname, O_RDONLY)) < 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  104:   // Get the file info (for file length)
        1:  105:   CHECK_ERROR(fstat(fd, &finfo) < 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  106:   // Memory map the file
        1:  107:   CHECK_ERROR((fdata = mmap(0, finfo.st_size + 1, 
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  108:      PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0)) == NULL);
        -:  109:   
        1:  110:   if ((fdata[0] != 'B') || (fdata[1] != 'M')) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  111:      printf("File is not a valid bitmap file. Exiting\n");
call    0 never executed
    #####:  112:      exit(1);
call    0 never executed
        -:  113:   }
        -:  114:   
        1:  115:   test_endianess();    // will set the variable "swap"
call    0 returned 1
        -:  116:   
        1:  117:   unsigned short *bitsperpixel = (unsigned short *)(&(fdata[BITS_PER_PIXEL_POS]));
        1:  118:   if (swap) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  119:      swap_bytes((char *)(bitsperpixel), sizeof(*bitsperpixel));
call    0 never executed
        -:  120:   }
        1:  121:   if (*bitsperpixel != 24) {    // ensure its 3 bytes per pixel
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  122:      printf("Error: Invalid bitmap format - ");
call    0 never executed
    #####:  123:      printf("This application only accepts 24-bit pictures. Exiting\n");
call    0 never executed
    #####:  124:      exit(1);
call    0 never executed
        -:  125:   }
        -:  126:   
        1:  127:   unsigned short *data_pos = (unsigned short *)(&(fdata[IMG_DATA_OFFSET_POS]));
        1:  128:   if (swap) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  129:      swap_bytes((char *)(data_pos), sizeof(*data_pos));
call    0 never executed
        -:  130:   }
        -:  131:   
        1:  132:   int imgdata_bytes = (int)finfo.st_size - (int)(*(data_pos));
        1:  133:   printf("This file has %d bytes of image data, %d pixels\n", imgdata_bytes,
call    0 returned 1
        -:  134:                                                            imgdata_bytes / 3);
        -:  135:                                                            
        1:  136:   printf("Starting sequential histogram\n");                                                            
call    0 returned 1
        -:  137:
        -:  138:   
        1:  139:   memset(&(red[0]), 0, sizeof(int) * 256);
        1:  140:   memset(&(green[0]), 0, sizeof(int) * 256);
        1:  141:   memset(&(blue[0]), 0, sizeof(int) * 256);
        -:  142:   
 34843393:  143:   for (i=*data_pos; i < finfo.st_size; i+=3) {      
branch  0 taken 34843392
branch  1 taken 1 (fallthrough)
 34843392:  144:      unsigned char *val = (unsigned char *)&(fdata[i]);
 34843392:  145:      blue[*val]++;
        -:  146:      
 34843392:  147:      val = (unsigned char *)&(fdata[i+1]);
 34843392:  148:      green[*val]++;
        -:  149:      
 34843392:  150:      val = (unsigned char *)&(fdata[i+2]);
 34843392:  151:      red[*val]++;   
        -:  152:   }
        -:  153:   
        1:  154:   dprintf("\n\nBlue\n");
call    0 returned 1
        1:  155:   dprintf("----------\n\n");
call    0 returned 1
      257:  156:   for (i = 0; i < 256; i++) {
branch  0 taken 256
branch  1 taken 1 (fallthrough)
      256:  157:      dprintf("%d - %d\n", i, blue[i]);        
call    0 returned 256
        -:  158:   }
        -:  159:   
        1:  160:   dprintf("\n\nGreen\n");
call    0 returned 1
        1:  161:   dprintf("----------\n\n");
call    0 returned 1
      257:  162:   for (i = 0; i < 256; i++) {
branch  0 taken 256
branch  1 taken 1 (fallthrough)
      256:  163:      dprintf("%d - %d\n", i, green[i]);        
call    0 returned 256
        -:  164:   }
        -:  165:   
        1:  166:   dprintf("\n\nRed\n");
call    0 returned 1
        1:  167:   dprintf("----------\n\n");
call    0 returned 1
      257:  168:   for (i = 0; i < 256; i++) {
branch  0 taken 256
branch  1 taken 1 (fallthrough)
      256:  169:      dprintf("%d - %d\n", i, red[i]);        
call    0 returned 256
        -:  170:   }
        -:  171:
        1:  172:   CHECK_ERROR(munmap(fdata, finfo.st_size + 1) < 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        1:  173:   CHECK_ERROR(close(fd) < 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  174:
        1:  175:   return 0;
        -:  176:}
